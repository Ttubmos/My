#include <iostream>
#include <stack>
#include <cctype>
#include <string>
#include <sstream>

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}


    std::stack<double> values;
    std::stack<char> operators;
    std::istringstream iss(expression);

    while (!iss.eof()) {
        std::string token;
        iss >> token;

        if (token.empty()) {
            continue;
     values.push(std::stod(token));
        } else if (isOperator(token[0])) {
            char currentOperator = token[0];
            while (!operators.empty() && isOperator(operators.top()) &&
                   precedence(operators.top()) >= precedence(currentOperator)) {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.push(currentOperator);
        } else if (token[0] == '(') {
            operators.push(token[0]);
        } else if (token[0] == ')') {
            while (!operators.empty() && operators.top() != '(') {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.pop();  // Remove the left parenthesis
        }
    }

    while (!operators.empty()) {
        double b = values.top(); values.pop();
        double a = values.top(); values.pop();
        char op = operators.top(); operators.pop();
        values.push(applyOperator(a, b, op)); return values.top();
int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (std::exception&) {
        std::cout << "Ошибка: Неверное выражение." << stическое выражение: ";
    std::getline(std::cin, expression)   try {
        double result = ealuateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cout << "Ошибка: " << e.what() << std::endl;
    }    return 0;
}
#include <iostream>
#include <stack>
#include <cctype>
#include <string>
#include <sstream>

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

double applyOperator(double a, double b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        default: return 0.0;
    }
}

double evaluateExpression(const std::string& expression) {
    std::stack<double> values;
    std::stack<char> operators;
    std::istringstream iss(expression);

    while (!iss.eof()) {
        std::string token;
        iss >> token;

        if (token.empty()) {
            continue;
        }

        if (isdigit(token[0])) {
            values.push(std::stod(token));
        } else if (isOperator(token[0])) {
            char currentOperator = token[0];
            while (!operators.empty() && isOperator(operators.top()) &&
                   precedence(operators.top()) >= precedence(currentOperator)) {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.push(currentOperator);
        } else if (token[0] == '(') {
            operators.push(token[0]);
        } else if (token[0] == ')') {
            while (!operators.empty() && operators.top() != '(') {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.pop();  // Remove the left parenthesis
        }
    }

    while (!operators.empty()) {
        double b = values.top(); values.pop();
        double a = values.top(); values.pop();
        char op = operators.top(); operators.pop();
        values.push(applyOperator(a, b, op));
    }

    return values.top();
}

int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (std::exception&) {
        std::cout << "Ошибка: Неверное выражение." << std::endl;
    }

    return 0;
}
int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cout << "Ошибка: " << e.what() << std::endl;
    }

    return 0;
}
#include <iostream>
#include <stack>
#include <cctype>
#include <string>
#include <sstream>

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

double applyOperator(double a, double b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        default: return 0.0;
    }
}

double evaluateExpression(const std::string& expression) {
    std::stack<double> values;
    std::stack<char> operators;
    std::istringstream iss(expression);

    while (!iss.eof()) {
        std::string token;
        iss >> token;

        if (token.empty()) {
            continue;
        }

        if (isdigit(token[0])) {
            values.push(std::stod(token));
        } else if (isOperator(token[0])) {
            char currentOperator = token[0];
            while (!operators.empty() && isOperator(operators.top()) &&
                   precedence(operators.top()) >= precedence(currentOperator)) {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.push(currentOperator);
        } else if (token[0] == '(') {
            operators.push(token[0]);
        } else if (token[0] == ')') {
            while (!operators.empty() && operators.top() != '(') {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.pop();  // Remove the left parenthesis
        }
    }

    while (!operators.empty()) {
        double b = values.top(); values.pop();
        double a = values.top(); values.pop();
        char op = operators.top(); operators.pop();
        values.push(applyOperator(a, b, op));
    }

    return values.top();
}

int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (std::exception&) {
        std::cout << "Ошибка: Неверное выражение." << std::endl;
    }

    return 0;
}
int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cout << "Ошибка: " << e.what() << std::endl;
    }

    return 0;
}
#include <iostream>
#include <stack>
#include <cctype>
#include <string>
#include <sstream>

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

double applyOperator(double a, double b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        default: return 0.0;
    }
}

double evaluateExpression(const std::string& expression) {
    std::stack<double> values;
    std::stack<char> operators;
    std::istringstream iss(expression);

    while (!iss.eof()) {
        std::string token;
        iss >> token;

        if (token.empty()) {
            continue;
        }

        if (isdigit(token[0])) {
            values.push(std::stod(token));
        } else if (isOperator(token[0])) {
            char currentOperator = token[0];
            while (!operators.empty() && isOperator(operators.top()) &&
                   precedence(operators.top()) >= precedence(currentOperator)) {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.push(currentOperator);
        } else if (token[0] == '(') {
            operators.push(token[0]);
        } else if (token[0] == ')') {
            while (!operators.empty() && operators.top() != '(') {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.pop();  // Remove the left parenthesis
        }
    }

    while (!operators.empty()) {
        double b = values.top(); values.pop();
        double a = values.top(); values.pop();
        char op = operators.top(); operators.pop();
        values.push(applyOperator(a, b, op));
    }

    return values.top();
}

int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (std::exception&) {
        std::cout << "Ошибка: Неверное выражение." << std::endl;
    }

    return 0;
}
int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cout << "Ошибка: " << e.what() << std::endl;
    }

    return 0;
}
#include <iostream>
#include <stack>
#include <cctype>
#include <string>
#include <sstream>

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

double applyOperator(double a, double b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        default: return 0.0;
    }
}

double evaluateExpression(const std::string& expression) {
    std::stack<double> values;
    std::stack<char> operators;
    std::istringstream iss(expression);

    while (!iss.eof()) {
        std::string token;
        iss >> token;

        if (token.empty()) {
            continue;
        }

        if (isdigit(token[0])) {
            values.push(std::stod(token));
        } else if (isOperator(token[0])) {
            char currentOperator = token[0];
            while (!operators.empty() && isOperator(operators.top()) &&
                   precedence(operators.top()) >= precedence(currentOperator)) {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.push(currentOperator);
        } else if (token[0] == '(') {
            operators.push(token[0]);
        } else if (token[0] == ')') {
            while (!operators.empty() && operators.top() != '(') {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.pop();  // Remove the left parenthesis
        }
    }

    while (!operators.empty()) {
        double b = values.top(); values.pop();
        double a = values.top(); values.pop();
        char op = operators.top(); operators.pop();
        values.push(applyOperator(a, b, op));
    }

    return values.top();
}

int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (std::exception&) {
        std::cout << "Ошибка: Неверное выражение." << std::endl;
    }

    return 0;
}
int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cout << "Ошибка: " << e.what() << std::endl;
    }

    return 0;
}
#include <iostream>
#include <stack>
#include <cctype>
#include <string>
#include <sstream>

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

double applyOperator(double a, double b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        default: return 0.0;
    }
}

double evaluateExpression(const std::string& expression) {
    std::stack<double> values;
    std::stack<char> operators;
    std::istringstream iss(expression);

    while (!iss.eof()) {
        std::string token;
        iss >> token;

        if (token.empty()) {
            continue;
        }

        if (isdigit(token[0])) {
            values.push(std::stod(token));
        } else if (isOperator(token[0])) {
            char currentOperator = token[0];
            while (!operators.empty() && isOperator(operators.top()) &&
                   precedence(operators.top()) >= precedence(currentOperator)) {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.push(currentOperator);
        } else if (token[0] == '(') {
            operators.push(token[0]);
        } else if (token[0] == ')') {
            while (!operators.empty() && operators.top() != '(') {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.pop();  // Remove the left parenthesis
        }
    }

    while (!operators.empty()) {
        double b = values.top(); values.pop();
        double a = values.top(); values.pop();
        char op = operators.top(); operators.pop();
        values.push(applyOperator(a, b, op));
    }

    return values.top();
}

int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (std::exception&) {
        std::cout << "Ошибка: Неверное выражение." << std::endl;
    }

    return 0;
}
int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cout << "Ошибка: " << e.what() << std::endl;
    }

    return 0;
}
#include <iostream>
#include <stack>
#include <cctype>
#include <string>
#include <sstream>

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

double applyOperator(double a, double b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        default: return 0.0;
    }
}

double evaluateExpression(const std::string& expression) {
    std::stack<double> values;
    std::stack<char> operators;
    std::istringstream iss(expression);

    while (!iss.eof()) {
        std::string token;
        iss >> token;

        if (token.empty()) {
            continue;
        }

        if (isdigit(token[0])) {
            values.push(std::stod(token));
        } else if (isOperator(token[0])) {
            char currentOperator = token[0];
            while (!operators.empty() && isOperator(operators.top()) &&
                   precedence(operators.top()) >= precedence(currentOperator)) {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.push(currentOperator);
        } else if (token[0] == '(') {
            operators.push(token[0]);
        } else if (token[0] == ')') {
            while (!operators.empty() && operators.top() != '(') {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.pop();  // Remove the left parenthesis
        }
    }

    while (!operators.empty()) {
        double b = values.top(); values.pop();
        double a = values.top(); values.pop();
        char op = operators.top(); operators.pop();
        values.push(applyOperator(a, b, op));
    }

    return values.top();
}

int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (std::exception&) {
        std::cout << "Ошибка: Неверное выражение." << std::endl;
    }

    return 0;
}
int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cout << "Ошибка: " << e.what() << std::endl;
    }

    return 0;
}
#include <iostream>
#include <stack>
#include <cctype>
#include <string>
#include <sstream>

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

double applyOperator(double a, double b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        default: return 0.0;
    }
}

double evaluateExpression(const std::string& expression) {
    std::stack<double> values;
    std::stack<char> operators;
    std::istringstream iss(expression);

    while (!iss.eof()) {
        std::string token;
        iss >> token;

        if (token.empty()) {
            continue;
        }

        if (isdigit(token[0])) {
            values.push(std::stod(token));
        } else if (isOperator(token[0])) {
            char currentOperator = token[0];
            while (!operators.empty() && isOperator(operators.top()) &&
                   precedence(operators.top()) >= precedence(currentOperator)) {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.push(currentOperator);
        } else if (token[0] == '(') {
            operators.push(token[0]);
        } else if (token[0] == ')') {
            while (!operators.empty() && operators.top() != '(') {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.pop();  // Remove the left parenthesis
        }
    }

    while (!operators.empty()) {
        double b = values.top(); values.pop();
        double a = values.top(); values.pop();
        char op = operators.top(); operators.pop();
        values.push(applyOperator(a, b, op));
    }

    return values.top();
}

int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (std::exception&) {
        std::cout << "Ошибка: Неверное выражение." << std::endl;
    }

    return 0;
}
int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cout << "Ошибка: " << e.what() << std::endl;
    }

    return 0;
}
#include <iostream>
#include <stack>
#include <cctype>
#include <string>
#include <sstream>

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

double applyOperator(double a, double b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        default: return 0.0;
    }
}

double evaluateExpression(const std::string& expression) {
    std::stack<double> values;
    std::stack<char> operators;
    std::istringstream iss(expression);

    while (!iss.eof()) {
        std::string token;
        iss >> token;

        if (token.empty()) {
            continue;
        }

        if (isdigit(token[0])) {
            values.push(std::stod(token));
        } else if (isOperator(token[0])) {
            char currentOperator = token[0];
            while (!operators.empty() && isOperator(operators.top()) &&
                   precedence(operators.top()) >= precedence(currentOperator)) {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.push(currentOperator);
        } else if (token[0] == '(') {
            operators.push(token[0]);
        } else if (token[0] == ')') {
            while (!operators.empty() && operators.top() != '(') {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.pop();  // Remove the left parenthesis
        }
    }

    while (!operators.empty()) {
        double b = values.top(); values.pop();
        double a = values.top(); values.pop();
        char op = operators.top(); operators.pop();
        values.push(applyOperator(a, b, op));
    }

    return values.top();
}

int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (std::exception&) {
        std::cout << "Ошибка: Неверное выражение." << std::endl;
    }

    return 0;
}
int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cout << "Ошибка: " << e.what() << std::endl;
    }

    return 0;
}
#include <iostream>
#include <stack>
#include <cctype>
#include <string>
#include <sstream>

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

double applyOperator(double a, double b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        default: return 0.0;
    }
}

double evaluateExpression(const std::string& expression) {
    std::stack<double> values;
    std::stack<char> operators;
    std::istringstream iss(expression);

    while (!iss.eof()) {
        std::string token;
        iss >> token;

        if (token.empty()) {
            continue;
        }

        if (isdigit(token[0])) {
            values.push(std::stod(token));
        } else if (isOperator(token[0])) {
            char currentOperator = token[0];
            while (!operators.empty() && isOperator(operators.top()) &&
                   precedence(operators.top()) >= precedence(currentOperator)) {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.push(currentOperator);
        } else if (token[0] == '(') {
            operators.push(token[0]);
        } else if (token[0] == ')') {
            while (!operators.empty() && operators.top() != '(') {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.pop();  // Remove the left parenthesis
        }
    }

    while (!operators.empty()) {
        double b = values.top(); values.pop();
        double a = values.top(); values.pop();
        char op = operators.top(); operators.pop();
        values.push(applyOperator(a, b, op));
    }

    return values.top();
}

int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (std::exception&) {
        std::cout << "Ошибка: Неверное выражение." << std::endl;
    }

    return 0;
}
int main() {
    std::string expression;
    std::cout << "Введите математическое выражение: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Результат: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cout << "Ошибка: " << e.what() << std::endl;
    }

    return 0;
}
